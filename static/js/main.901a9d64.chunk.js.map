{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["heroMarketUrl","id","ScanTable","props","scanHeroParams","heroPrice","interval","heroName","useState","data","setData","intervalRef","useRef","fetchHeroes","useCallback","a","fetch","headers","accept","pragma","referrer","referrerPolicy","body","method","mode","credentials","response","json","jsonResponse","items","lowestPriceHero","forEach","item","price","sale","find","Notification","onclick","window","open","uniqBy","columns","useMemo","key","dataIndex","title","render","href","useEffect","current","clearInterval","setInterval","rowKey","dataSource","App","heroParams","setHeroParams","permission","requestPermission","style","paddingTop","name","labelCol","span","wrapperCol","initialValues","onFinish","values","heroParam","notification","error","message","autoComplete","Item","label","rules","required","min","offset","type","htmlType","map","param","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.901a9d64.chunk.js","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Button, Form, Input, InputNumber, notification, Table } from \"antd\";\nimport { ColumnsType } from \"antd/es/table\";\nimport { uniqBy, find } from \"lodash\";\n\ninterface ScanHeroParams {\n  heroName: string;\n  heroPrice: number;\n  interval: number;\n}\n\ninterface Hero {\n  id: string;\n  sale: {\n    price: number;\n  };\n}\n\nconst heroMarketUrl = (id: string) =>\n  `https://market.heroesempires.com/market/${id}`;\n\nconst ScanTable: React.FC<{ scanHeroParams: ScanHeroParams }> = (props) => {\n  const { scanHeroParams } = props;\n  const { heroPrice, interval, heroName } = scanHeroParams;\n  const [data, setData] = useState<Hero[]>([]);\n  const intervalRef = useRef<number>();\n\n  const fetchHeroes = useCallback(async () => {\n    const response = await fetch(\n      `https://marketplace-api.heroesempires.com/sale-items?class&desc=false&listedOnMarket=true&minPrice&orderBy=price&page=1&race&search=${heroName}&size=21&tier&maxPrice=${heroPrice}`,\n      {\n        headers: {\n          accept: \"application/json, text/plain, */*\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cache-control\": \"no-cache\",\n          pragma: \"no-cache\",\n          \"sec-fetch-dest\": \"empty\",\n          \"sec-fetch-mode\": \"cors\",\n          \"sec-fetch-site\": \"same-site\",\n          \"sec-gpc\": \"1\",\n        },\n        referrer: \"https://market.heroesempires.com/\",\n        referrerPolicy: \"strict-origin-when-cross-origin\",\n        body: null,\n        method: \"GET\",\n        mode: \"cors\",\n        credentials: \"omit\",\n      }\n    );\n    const jsonResponse = await response.json();\n    const items: Hero[] = jsonResponse.data.items;\n    let lowestPriceHero: Hero = items[0];\n\n    items.forEach((item) => {\n      const {\n        sale: { price },\n      } = item;\n      if (!lowestPriceHero || price < lowestPriceHero.sale.price) {\n        lowestPriceHero = item;\n      }\n    });\n\n    if (!lowestPriceHero || lowestPriceHero.sale.price > heroPrice) {\n      return;\n    }\n\n    const {\n      id,\n      sale: { price },\n    } = lowestPriceHero;\n\n    const existing = find(data, [\"id\", id]);\n    if (existing) {\n      return;\n    }\n\n    const notification = new Notification(\"ScanHero\", {\n      body: `${heroName}: ${price}`,\n    });\n    notification.onclick = function () {\n      window.open(heroMarketUrl(id));\n    };\n    setData(uniqBy([...data, lowestPriceHero], \"id\"));\n  }, [data, setData, heroName, heroPrice]);\n\n  const columns = useMemo<ColumnsType<Hero>>(\n    () => [\n      {\n        key: \"id\",\n        dataIndex: \"id\",\n        title: \"ID\",\n        render(id: string) {\n          return <a href={heroMarketUrl(id)}>{id}</a>;\n        },\n      },\n      {\n        key: \"price\",\n        dataIndex: [\"sale\", \"price\"],\n        title: \"Price\",\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    intervalRef.current = window.setInterval(fetchHeroes, interval);\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [fetchHeroes, interval]);\n\n  return (\n    <Table\n      rowKey=\"id\"\n      title={() => (\n        <strong>\n          {heroName}: {heroPrice}\n        </strong>\n      )}\n      columns={columns}\n      dataSource={data}\n    />\n  );\n};\n\nfunction App() {\n  const [heroParams, setHeroParams] = useState<ScanHeroParams[]>([]);\n\n  useEffect(() => {\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  const onFinish = (values: ScanHeroParams) => {\n    const existing = !!heroParams.find(\n      (heroParam) =>\n        heroParam.heroPrice === values.heroPrice &&\n        heroParam.heroName === values.heroName\n    );\n    if (existing) {\n      notification.error({\n        message: \"Existing\",\n      });\n      return;\n    }\n    setHeroParams([...heroParams, values]);\n  };\n\n  return (\n    <Form<ScanHeroParams>\n      style={{\n        paddingTop: 20,\n      }}\n      name=\"scanForm\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n      initialValues={{\n        heroName: \"Tusk\",\n        heroPrice: 240,\n        interval: 5000,\n      }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item\n        label=\"Hero Name\"\n        name=\"heroName\"\n        rules={[{ required: true, message: \"Please input hero name!\" }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Hero Price\"\n        name=\"heroPrice\"\n        rules={[{ required: true, message: \"Please input hero price!\" }]}\n      >\n        <InputNumber min={1} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Set Interval\"\n        name=\"interval\"\n        rules={[{ required: true, message: \"Please input interval!\" }]}\n      >\n        <InputNumber min={2000} />\n      </Form.Item>\n\n      <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n      {heroParams.map((param) => (\n        <ScanTable\n          key={`${param.heroName}_${param.heroPrice}`}\n          scanHeroParams={param}\n        />\n      ))}\n    </Form>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}